#!/usr/bin/env python

"""sshtunnel: a script for managing SSH tunnels.

Usage:
 sshtunnel [--version] [--debug] [COMMAND] [TUNNEL]...
 sshtunnel --version
 sshtunnel (-h | --help)

Where the COMMAND is one of:
  tunnels - Show all of the available tunnels.
            If TUNNEL is specified, only matching tunnels are shown
  list    - List the running tunnels.
            If TUNNEL is specified, only matching tunnels are shown
  running - A synonym for "list".
  start   - Start a new tunnel.
            At least one TUNNEL is required
  restart - Restart any stopped tunnels.
            TUNNEL is forbidden.
  stop    - Stop a running tunnel.
            At least one TUNNEL is required

If no COMMAND or TUNNEL is provided, "list" is assumed. If no COMMAND
is given but at least one TUNNEL is provided, "stop" is assumed if the
first tunnel specified is running, "start" if it's not.

Options:
  -h --help       Show this help.
  --version       Show version.
  --debug         Enable debugging messages.

"""

__title__ = 'SSHTunnel'
__author__ = 'Norman Walsh'
__copyright__ = 'Copyright © 2018, 2019 by Norman Walsh'
__license__ = 'MIT'
__version__ = '1.2.0'
__uri__ = 'https://github.com/ndw/sshtunnel'

import errno
import fcntl
import json
import os
import re
import subprocess
from shutil import which
import sys
import time
from datetime import datetime
import psutil
from docopt import docopt

CONFIGFILE = ".sshtunnels"
PIDFILE = "/tmp/.sshtunnels-pids"
LOCKFILE = "/tmp/.sshtunnels-pids.lock"
COMMANDS = ["tunnels", "list", "running", "start", "stop", "restart"]
SSH = which('ssh')

class Tunnels:
    """The Tunnels object manages a set of SSH tunnels."""

    # pylint: disable=too-many-instance-attributes
    def __init__(self, debug):
        """Initilize the object"""
        self._config = {}
        self._tunnels = {}
        self._pidfile = PIDFILE
        self._lockfile = LOCKFILE
        self._lock = None
        self._pids = []
        self._stopped = []
        self._debug = debug

        self._loadconfig()

        if "pidfile" in self._tunnels:
            self._pidfile = self._tunnels["pidfile"]

        if "lockfile" in self._tunnels:
            self._lockfile = self._tunnels["lockfile"]

    def _loadconfig(self):
        """Load the tunnel configuration file from $HOME."""
        home = os.path.expanduser("~")
        cfgfile = home + "/" + CONFIGFILE
        if os.path.isfile(cfgfile):
            data = open(cfgfile).read()
            self._config = json.loads(data)

        # Load the PIDs of running (or previously running) tunnels
        self._get_lock()
        self._get_pids()
        self._check_pids()
        self._save_pids()
        self._release_lock()

        pidmap = {}
        for info in self._pids:
            pidmap[info['name']] = True

        self._tunnels = {}
        if 'tunnels' in self._config:
            for tunnel in self._config['tunnels']:
                tobj = tunnel.copy()
                tobj['running'] = tunnel['name'] in pidmap
                self._tunnels[tunnel['name']] = tobj

    def tunnels(self):
        """Return a dictionary of the tunnels that are available. Each tunnel
        is annotated with a 'running' property which identifies whether or
        not the tunnel is currently running."""
        return self._tunnels

    def start(self, names):
        """Start a list of tunnels."""

        tdict = self.tunnels()
        for name in names:
            tobj = tdict[name]
            for param in tobj["params"]:
                self._start_tunnel(tobj, param)

    def _start_tunnel(self, tunnel, params):
        privkey = ""
        if 'privkey' in tunnel:
            if tunnel['privkey'] != '':
                privkey = "-i {} ".format(tunnel['privkey'])

        command = "{} {}{}@{} -L {}:{}:{} -N".format(
            SSH,
            privkey,
            tunnel['login'], tunnel['host'],
            params['port1'], params['host'], params['port2'])

        if self._debug:
            print(command)

        process = subprocess.Popen(command.split(), close_fds=True)

        print("Starting {} ({})".format(tunnel['name'], process.pid))

        self._add_pid(process.pid, tunnel, params)

    def restart(self):
        """Restart any stopped tunnels."""
        for info in self._stopped:
            self._start_tunnel(info['tunnel'], info['params'])

    def stop(self, names):
        """Stop a list of tunnels."""
        for info in self._pids:
            if info['name'] in names:
                proc = psutil.Process(info['pid'])
                proc.terminate()
                print("Terminating {} ({})".format(info['name'], info['pid']))

    def running(self):
        """Determine which tunnels are running; update the PID cache."""

        # The PIDFILE data structure is a bit of a mess. Let's do a little
        # work to make the print out prettier
        names = []
        for info in self._pids:
            names.append(info['name'])
        names = set(names)

        for name in sorted(names):
            first = True

            for info in self._pids:
                if info['name'] == name:
                    if first:
                        print("{}:".format(name))
                        first = False

                    proc = psutil.Process(info['pid'])
                    today = datetime.fromtimestamp(
                        time.time()).strftime("%Y-%m-%d")
                    sdate = datetime.fromtimestamp(
                        proc.create_time()).strftime("%Y-%m-%d")
                    stime = datetime.fromtimestamp(
                        proc.create_time()).strftime("%H:%M:%S")
                    started = stime
                    if sdate != today:
                        started = sdate + " " + stime
                    print("\t{}:{} → {}:{} since {} (pid: {})".format(
                        info['params']['host'], info['params']['port1'],
                        info['tunnel']['host'], info['params']['port2'],
                        started, info['pid']))

    def _get_pids(self):
        """Load the PID cache file."""
        if os.path.isfile(self._pidfile):
            pids = open(PIDFILE).read()
            self._pids = json.loads(pids)

    def _save_pids(self):
        """Store the PID cache file."""
        with open(PIDFILE, 'w') as outfile:
            json.dump(self._pids, outfile)

    def _check_pids(self):
        """Check to see if the PIDs in the cache appear to be running."""
        pidmap = {}
        for info in self._pids:
            pidmap[info['pid']] = "?"

        for proc in psutil.process_iter(attrs=['pid', 'name', 'username']):
            if proc.info['pid'] in pidmap and proc.info['name'] == 'ssh':
                pidmap[proc.info['pid']] = "running"

        pids = []
        for info in self._pids:
            if pidmap[info['pid']] == 'running':
                pids.append(info)
                if self._debug:
                    print("Running {} ({})".format(info['name'], info['pid']))
            else:
                self._stopped.append(info)
                if self._debug:
                    print("Missing {} ({})".format(info['name'], info['pid']))

        self._pids = pids

    def _add_pid(self, pid, tunnel, params):
        """Add PID for the newly started tunnels to the cache."""
        self._get_lock()
        self._get_pids()
        self._check_pids()

        info = {
            "pid": pid,
            "name": tunnel['name'],
            "tunnel": tunnel,
            "params": params
            }

        self._pids.append(info)
        self._save_pids()
        self._release_lock()

    # I'm not confident these are reliable or cross-platform.
    # Credit: http://tilde.town/~cristo/file-locking-in-python.html
    def _get_lock(self):
        """Obtain a lock for writing to the PID cache."""
        self._lock = open(LOCKFILE, 'w+')
        while True:
            try:
                fcntl.flock(self._lock, fcntl.LOCK_EX | fcntl.LOCK_NB)
                break
            except IOError as ioerr:
                if ioerr.errno != errno.EAGAIN:
                    raise
                time.sleep(0.1)


    def _release_lock(self):
        """Release the lock for writing to the PID cache."""
        fcntl.flock(self._lock, fcntl.LOCK_UN)
        self._lock.close()
        self._lock = None

def _expand_tunnel_names(tunnels, tlist, allow_ambiguity=False):
    # Assume that the tunnels names specified might be partial matches
    tset = set()
    for tunnel in tlist:
        if tunnel in tunnels.tunnels():
            tset.add(tunnel)
        else:
            # Is this the right or a reasonable regex?
            regex = re.compile(".*" + tunnel + ".*", flags=re.IGNORECASE)
            matches = set()
            for tname in tunnels.tunnels():
                if re.match(regex, tname):
                    matches.add(tname)
                    tset.add(tname)
            if len(matches) == 0:
                print("Cannot find tunnel: %s" % tunnel)
                sys.exit(1)
            if not allow_ambiguity and len(matches) != 1:
                print("Tunnel name is ambiguous: %s" % tunnel)
                sys.exit(1)

    return list(tset)

def _check_args():
    args = docopt(__doc__, version="sshtunnel " + __version__)

    if args['--version']:
        print("{} v{}".format(__title__, __version__))
        print(__copyright__)
        print(__uri__)
        if args['command'] is None:
            sys.exit(0)

    return args

def _resolve_implicit_command(tunnels, args):
    # pylint: disable=too-many-branches
    command = args['COMMAND']
    tlist = args['TUNNEL']
    # If there's a command but no tunnel, and the command isn't a valid
    # command, assume it's a tunnel specifier.
    if len(tlist) == 0 and command is not None and command not in COMMANDS:
        tlist.insert(0, command)
        command = None

    exlist = _expand_tunnel_names(tunnels, tlist, allow_ambiguity=True)

    for tunnel in exlist:
        if not tunnel in tunnels.tunnels():
            print("No such tunnel: %s" % tunnel)
            sys.exit(1)

    if command is None:
        if exlist:
            if tunnels.tunnels()[exlist[0]]["running"]:
                command = "stop"
            else:
                command = "start"
        else:
            command = "list"

    if command not in COMMANDS:
        print("Unrecognized command: %s" % command)
        sys.exit(1)

    if command != "tunnels":
        exlist = _expand_tunnel_names(tunnels, tlist, allow_ambiguity=False)

    if command == "stop" and not exlist:
        for tunnel in tunnels.tunnels():
            tobj = tunnels.tunnels()[tunnel]
            if tobj["running"]:
                exlist.append(tunnel)

    return (command, exlist)

def main():
    """The main entry point to the script; process command line arguments
    and execute appropriate methods."""

    args = _check_args()

    tunnels = Tunnels(args['--debug'])

    (command, tlist) = _resolve_implicit_command(tunnels, args)

    try:
        if command == 'tunnels':
            if tlist:
                for tunnel in tlist:
                    print(tunnel)
            else:
                for tunnel in tunnels.tunnels():
                    print(tunnel)
        elif command == 'start':
            tunnels.start(tlist)
        elif command == 'restart':
            if tlist:
                print("The restart command does not take a list of tunnels")
                sys.exit(1)
            tunnels.restart()
        elif command == 'stop':
            tunnels.stop(tlist)
        elif command in ('list', 'running'):
            tunnels.running()
    except RuntimeError as rterr:
        print("Error: " + str(rterr))
        sys.exit(1)

if __name__ == '__main__':
    if not SSH:
        print("Cannot find 'ssh' executable.")
        sys.exit(1)
    main()
